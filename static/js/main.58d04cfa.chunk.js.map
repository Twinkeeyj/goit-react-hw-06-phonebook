{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ContactList/ContactList.module.css","App.module.css","redux/listActions.js","components/AnswerError/AnswerError.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","App.js","redux/listReducer.js","redux/store.js","index.js"],"names":["module","exports","addContact","createAction","name","number","payload","contact","id","uuidv4","removeContact","filterContact","AnswerError","isVisible","CSSTransition","in","timeout","classNames","unmountOnExit","className","ContactForm","state","handleChange","target","setState","value","handleSubmit","event","preventDefault","props","list","some","setTimeout","this","classes","container","action","onSubmit","label","htmlFor","input","type","placeholder","onChange","Component","mapDispatchToProps","newContact","connect","contacts","items","ContactList","prevProps","prevState","localStorage","setItem","JSON","stringify","TransitionGroup","component","map","el","button","onClick","delete","listActions","filter","toLowerCase","includes","filterRender","listAction","e","App","appear","Filter","initialState","parse","getItem","createReducer","combineReducers","store","configureStore","reducer","contactsReducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.58d04cfa.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ContactForm_container__1q9zk\",\"label\":\"ContactForm_label__2tqWc\",\"input\":\"ContactForm_input__3mkYM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ContactList_container__RKqcq\",\"list\":\"ContactList_list__1F0tT\",\"button\":\"ContactList_button__36jC6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__2eFsc\"};","import { v4 as uuidv4 } from 'uuid';\r\nimport { createAction } from '@reduxjs/toolkit';\r\n\r\nconst addContact = createAction('ADD_CONTACT', ({ name, number }) => ({\r\n  payload: {\r\n    contact: { id: uuidv4(), name, number },\r\n  },\r\n}));\r\n// const addContact = ({name, number}) => ({\r\n//   type: action.ADD,\r\n//   payload: {\r\n//         contact: {id: uuidv4(), name, number},\r\n//   },\r\n// });\r\nconst removeContact = createAction('REMOVE_CONTACT');\r\n// const removeContact = id => ({\r\n//   type: action.REMOVE,\r\n//   payload: {\r\n//     id,\r\n//   },\r\n// });\r\nconst filterContact = createAction('FILTER_CONTACTS');\r\n// const filterContact = filter => ({\r\n//   type: action.FILTER,\r\n//   payload: filter,\r\n// });\r\nexport default { addContact, removeContact, filterContact };\r\n","import React from 'react';\r\n\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport '../../index.css';\r\n\r\nconst AnswerError = ({ isVisible }) => {\r\n  return (\r\n    <CSSTransition\r\n      in={isVisible}\r\n      timeout={250}\r\n      classNames=\"answer\"\r\n      unmountOnExit\r\n    >\r\n      <div className=\"answerContainer\">\r\n        <p>Contact already declared</p>\r\n      </div>\r\n    </CSSTransition>\r\n  );\r\n};\r\n\r\nexport default AnswerError;\r\n","import React, { Component } from 'react';\r\nimport classes from './ContactForm.module.css';\r\nimport { connect } from 'react-redux';\r\nimport newContact from '../../redux/listActions';\r\nimport AnswerError from '../AnswerError/AnswerError';\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n    isVisible: false,\r\n  };\r\n\r\n  handleChange = ({ target }) => {\r\n    this.setState({\r\n      [target.name]: target.value,\r\n    });\r\n  };\r\n  handleSubmit = event => {\r\n    event.preventDefault();\r\n    const truly = this.props.list.some(\r\n      contact => contact.name === this.state.name,\r\n    );\r\n    if (truly) {\r\n      this.setState({\r\n        isVisible: true,\r\n      });\r\n      setTimeout(() => {\r\n        this.setState({\r\n          isVisible: false,\r\n        });\r\n      }, 1500);\r\n      return;\r\n    }\r\n    this.props.addContact({ ...this.state });\r\n    this.setState({\r\n      name: '',\r\n      number: '',\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { name, number, isVisible } = this.state;\r\n    return (\r\n      <>\r\n        <div>\r\n          <AnswerError isVisible={isVisible} />\r\n        </div>\r\n\r\n        <form\r\n          className={classes.container}\r\n          action=\"\"\r\n          onSubmit={this.handleSubmit}\r\n        >\r\n          <label className={classes.label} htmlFor=\"name\">\r\n            Name\r\n          </label>\r\n          <input\r\n            className={classes.input}\r\n            type=\"text\"\r\n            name=\"name\"\r\n            placeholder=\"name\"\r\n            value={name}\r\n            onChange={this.handleChange}\r\n          />\r\n\r\n          <label className={classes.label} htmlFor=\"number\">\r\n            Number\r\n          </label>\r\n          <input\r\n            className={classes.input}\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            placeholder=\"number\"\r\n            value={number}\r\n            onChange={this.handleChange}\r\n          />\r\n          <input type=\"submit\" value=\"Add contact\" />\r\n        </form>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  list: state.contacts.items,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  addContact: newContact.addContact,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport classes from './ContactList.module.css';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\nimport { connect } from 'react-redux';\r\nimport listActions from '../../redux/listActions';\r\n\r\nclass ContactList extends Component {\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (prevProps.list !== this.props.list) {\r\n      localStorage.setItem('contacts', JSON.stringify(this.props.list));\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <>\r\n        <TransitionGroup component=\"ul\" className={classes.container}>\r\n          {this.props.list.map(el => {\r\n            return (\r\n              <CSSTransition key={el.id} classNames=\"showbutton\" timeout={250}>\r\n                <li key={el.id} className={classes.list}>\r\n                  {el.name} : {el.number}\r\n                  <button\r\n                    className={classes.button}\r\n                    type=\"button\"\r\n                    onClick={() => this.props.delete(el.id)}\r\n                  >\r\n                    Удалить\r\n                  </button>\r\n                </li>\r\n              </CSSTransition>\r\n            );\r\n          })}\r\n        </TransitionGroup>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nContactList.propTypes = {\r\n  Delete: PropTypes.func.isRequired,\r\n  list: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }),\r\n  ),\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  list: state.contacts.items.filter(contact =>\r\n    contact.name.toLowerCase().includes(state.contacts.filter.toLowerCase()),\r\n  ),\r\n});\r\nconst mapDispatchToProps = {\r\n  delete: listActions.removeContact,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport listAction from '../../redux/listActions';\r\n\r\nconst FilterName = ({ filterRender, filter }) => (\r\n  <div>\r\n    <label>Find contacts by name</label>\r\n    <input\r\n      type=\"text\"\r\n      value={filter}\r\n      onChange={e => filterRender(e.target.value)}\r\n    />\r\n  </div>\r\n);\r\n\r\nFilterName.propTypes = {\r\n  filterRender: PropTypes.func.isRequired,\r\n  filter: PropTypes.string,\r\n};\r\n\r\nconst mapStateToProps = state =>\r\n({\r\n  filter: state.filter,\r\n});\r\nconst mapDispatchToProps = {\r\n  filterRender: listAction.filterContact,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FilterName);\r\n","import React, { Component } from 'react';\r\n\r\nimport ContactForm from './components/ContactForm/ContactForm';\r\nimport ContactList from './components/ContactList/ContactList';\r\nimport Filter from './components/Filter/Filter';\r\nimport classes from './App.module.css';\r\nimport { CSSTransition } from 'react-transition-group';\r\n\r\n// const contactList = [\r\n//   { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\r\n//   { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\r\n//   { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\r\n//   { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\r\n// ];\r\n// const ERROR = {\r\n//   isVisible: false,\r\n//   answer: 'Such a contact is already in the list!',\r\n// };\r\n\r\nexport default class App extends Component {\r\n  // state = {\r\n  //   contacts: [],\r\n  //   filter: '',\r\n  //   ...ERROR,\r\n  // };\r\n  // componentDidMount() {\r\n  //   const persistedTask = localStorage.getItem('contacts') ;\r\n  //   if (persistedTask === null ) {\r\n  //     this.setState({\r\n  //       contacts: contactList,\r\n  //     });\r\n\r\n  //   } else if (persistedTask) {\r\n  //     this.setState({\r\n  //       contacts: JSON.parse(persistedTask),\r\n  //     });\r\n  //   }\r\n  //    }\r\n  // componentDidUpdate(prevProps, prevState) {\r\n  //  if (prevState.contacts !== this.state.contacts) {\r\n  //     localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\r\n  //   }\r\n\r\n  // }\r\n  // toAddContact = el => {\r\n  //   const truly = this.state.contacts.find(contact => contact.name === el.name);\r\n  //   if (truly) {\r\n  //     this.setState({\r\n  //       isVisible: true,\r\n  //     });\r\n  //     setTimeout(() => {\r\n  //       this.setState({\r\n  //         ...ERROR,\r\n  //       });\r\n  //     }, 1500);\r\n  //   } else if (el.name.length >= 1) {\r\n  //     this.setState(prev => {\r\n  //       const updateState = [...prev.contacts, el];\r\n  //       return { contacts: updateState };\r\n  //     });\r\n  //   }\r\n  // };\r\n  // filterRender = filter => {\r\n  //   this.setState({ filter });\r\n  // };\r\n  // filtresTask() {\r\n  //   const { contacts, filter } = this.state;\r\n  //   return contacts.filter(contact =>\r\n  //     contact.name.toLowerCase().includes(filter.toLowerCase()),\r\n  //   );\r\n  // }\r\n  // toDeleteContact = id => {\r\n  //   const { contacts } = this.state;\r\n  //   const obj = contacts.find(el => el.id === id);\r\n  //   const index = contacts.indexOf(obj);\r\n  //   this.setState(prevState => ({\r\n  //     contacts: [\r\n  //       ...prevState.contacts.slice(0, index),\r\n  //       ...prevState.contacts.slice(index + 1),\r\n  //     ],\r\n  //   }));\r\n  // };\r\n  render() {\r\n    // const { contacts, filter, isVisible, answer } = this.state;\r\n    // const filterText = this.filtresTask();\r\n\r\n    return (\r\n      <>\r\n        <div className={classes.container}>\r\n          <CSSTransition\r\n            in={true}\r\n            classNames=\"logo\"\r\n            timeout={250}\r\n            appear={true}\r\n            unmountOnExit\r\n          >\r\n            <h1>Phonebook</h1>\r\n          </CSSTransition>\r\n          <ContactForm />\r\n          <h2>Contacts</h2>\r\n\r\n          <Filter />\r\n\r\n          <ContactList />\r\n          {/* <CSSTransition\r\n            in={isVisible}\r\n            timeout={250}\r\n            unmountOnExit\r\n            classNames=\"answer\"\r\n          >\r\n            <AnswerError answer={answer} />\r\n          </CSSTransition> */}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport listAction from './listActions';\r\n\r\nconst defaultContact = [\r\n  { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\r\n  { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\r\n  { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\r\n  { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\r\n];\r\nconst localStore =\r\n  JSON.parse(localStorage.getItem('contacts')) || defaultContact;\r\n\r\nconst initialState = {\r\n  contacts: localStore,\r\n  filter: '',\r\n};\r\n\r\nconst newContact = (state, action) => [...state, action.payload.contact];\r\nconst removeAnyContact = (state, action) =>\r\n  state.filter(contact => contact.id !== action.payload);\r\n\r\nconst items = createReducer(initialState.contacts, {\r\n  [listAction.addContact]: newContact,\r\n  [listAction.removeContact]: removeAnyContact,\r\n});\r\n// const items = (state = initialState.contacts, { type, payload }) => {\r\n//   switch (type) {\r\n//     case listAction.addContact.type:\r\n//       return [...state, payload.contact];\r\n\r\n//     case listAction.removeContact.type:\r\n//       return state.filter(contact => contact.id !== payload);\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\nconst filter = createReducer(initialState.filter, {\r\n  [listAction.filterContact]: (state, action) => action.payload,\r\n});\r\n// const filter = (state = initialState.filter, { type, payload }) => {\r\n//   switch (type) {\r\n//     case listAction.filterContact.type:\r\n//       return payload;\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\nexport default combineReducers({ items, filter });\r\n","import contactsReducer from './listReducer';\r\nimport { configureStore } from '@reduxjs/toolkit';\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer,\r\n  },\r\n});\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\nimport store from './redux/store';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}